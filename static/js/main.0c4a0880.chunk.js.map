{"version":3,"sources":["Components/header.js","Components/Fetch.js","Components/content.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","FetchPhotos","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadMorePhotos","setState","loading","fetch","REACT_APP_FLICKR_KEY","then","res","json","morePhotos","photos","photo","map","phot","imgSrc","farm","server","id","secret","key","title","alt","src","more","state","length","concat","toConsumableArray","error","window","onscroll","_assertThisInitialize","assertThisInitialized","_assertThisInitialize2","innerHeight","document","documentElement","scrollTop","offsetHeight","Content","Fetch","App","header","content","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAaeA,mLATX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,yCALcE,mCCiFNC,cA/Ed,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QA6BDI,eAAiB,WAChBP,EAAKQ,SAAS,CAACC,SAAQ,GAAO,WAAKC,MAAM,gFAAgFC,IAAqB,4CAC5IC,KAAM,SAAAC,GAAG,OAAIA,EAAIC,SACfF,KAAM,SAAAE,GACN,IAAMC,EAAaD,EAAKE,OAAOC,MAAMC,IAAI,SAAAC,GACxC,IAAIC,EAAS,eAAeD,EAAKE,KAAK,qBAAqBF,EAAKG,OAAO,IAAIH,EAAKI,GAAG,IAAIJ,EAAKK,OAAO,OACnG,OACC9B,EAAAC,EAAAC,cAAA,MAAI2B,GAAG,YAAWE,IAAON,EAAKI,IACjCJ,EAAKO,MACLhC,EAAAC,EAAAC,cAAA,KAAG2B,GAAI,SAASJ,EAAKO,OAAahC,EAAAC,EAAAC,cAAA,KAAG2B,GAAG,SAAN,YAClC7B,EAAAC,EAAAC,cAAA,OAAK2B,GAAG,mBACP7B,EAAAC,EAAAC,cAAA,OAAK2B,GAAG,QAAQI,IAAKR,EAAKO,MAAOE,IAAKR,QAKtCpB,EAAKQ,SAAS,CACdqB,KAAM7B,EAAK8B,MAAMd,OAAOe,OAAS,IACjCtB,SAAQ,EACRO,OAAM,GAAAgB,OAAA/B,OAAAgC,EAAA,EAAAhC,CACHD,EAAK8B,MAAMd,QADRf,OAAAgC,EAAA,EAAAhC,CAEHc,WAjDPf,EAAK8B,MAAM,CACVI,OAAM,EACNL,MAAK,EACLpB,SAAS,EACTO,OAAO,IAGRmB,OAAOC,SAAW,WAAM,IAAAC,EAAApC,OAAAqC,EAAA,EAAArC,QAAAqC,EAAA,EAAArC,CAAAD,IAEtBO,EAFsB8B,EAEtB9B,eAFsBgC,EAAAF,EAGtBP,MACCI,EAJqBK,EAIrBL,MACAL,EALqBU,EAKrBV,KACApB,EANqB8B,EAMrB9B,QAIEyB,GAASzB,IAAYoB,GAErBM,OAAOK,YAAcC,SAASC,gBAAgBC,YAAcF,SAASC,gBAAgBE,cACxFrC,KAtBUP,mFA2BZG,KAAKI,kDAiCL,OACCb,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACCO,KAAK2B,MAAMd,QAEXb,KAAK2B,MAAMrB,QACXf,EAAAC,EAAAC,cAAA,OAAK2B,GAAG,WAAR,gBAES,GACRpB,KAAK2B,MAAMD,KAGJ,GAFTnC,EAAAC,EAAAC,cAAA,OAAK2B,GAAG,WAAR,yCAvEuBzB,aCYX+C,mLAVX,OACEnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdH,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAACkD,EAAD,eALehD,aCgBPiD,gOATX,OACErD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoD,EAAD,MACAtD,EAAAC,EAAAC,cAACqD,EAAD,cARUnD,aCOEoD,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,iECZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASf,SAASgB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,KAAK,SAAAiD,GACjCA,EAAaC","file":"static/js/main.0c4a0880.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n      \t<h1>Zenitech Task</h1>\r\n      \t<h2> Image Scroll View </h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, {Component} from 'react';\r\nimport REACT_APP_FLICKR_KEY from 'fetch-module';\r\n\r\nclass FetchPhotos extends Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\terror:false,\r\n\t\t\tmore:true,\r\n\t\t\tloading: false,\r\n\t\t\tphotos:[]\r\n\t\t};\r\n\r\n\t\twindow.onscroll = () => {\r\n\t\t\tconst{\r\n\t\t\t\tloadMorePhotos,\r\n\t\t\t\tstate:{\r\n\t\t\t\t\terror,\r\n\t\t\t\t\tmore,\r\n\t\t\t\t\tloading,\r\n\t\t\t\t},\r\n\t\t\t} = this;\r\n\r\n\t\t\tif (error || loading || !more) return; \r\n\r\n\t\t\tif (window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight){\r\n\t\t\t\tloadMorePhotos();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tthis.loadMorePhotos();\r\n\t}\r\n\r\n\tloadMorePhotos = () => {\r\n\t\tthis.setState({loading:true}, ()=>{fetch('https://api.flickr.com/services/rest/?method=flickr.photos.getRecent&api_key='+REACT_APP_FLICKR_KEY+'&per_page=5&format=json&nojsoncallback=1')\r\n\t\t\t.then (res => res.json())\r\n  \t\t\t.then (json => {\r\n  \t\t\t\tconst morePhotos = json.photos.photo.map(phot => {\r\n  \t\t\t\t\tlet imgSrc = 'https://farm'+phot.farm+'.staticflickr.com/'+phot.server+'/'+phot.id+'_'+phot.secret+'.jpg';\r\n  \t\t\t\t\treturn (\r\n  \t\t\t\t\t\t<li id=\"container\"key = {phot.id}>\r\n\t\t\t\t{phot.title ? \r\n\t\t\t\t\t<p id= \"title\">{phot.title}</p> : <p id=\"title\">No title</p>}\r\n\t\t\t\t\t<div id=\"image-container\">\r\n\t\t\t\t\t\t<img id=\"image\" alt={phot.title} src={imgSrc}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</li>\r\n  \t\t\t\t\t\t);\r\n  \t\t\t\t});\r\n  \t\t\t\tthis.setState({\r\n  \t\t\t\tmore: this.state.photos.length < 100,\r\n  \t\t\t\tloading:false,\r\n  \t\t\t\tphotos: [\r\n  \t\t\t\t...this.state.photos,\r\n  \t\t\t\t...morePhotos,]\r\n  \t\t\t});\r\n  \t\t\t});\r\n  \t\t\t\r\n  \t\t})\r\n\t\t\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t<div>\r\n\t\t\t{this.state.photos}\r\n\t\t\t</div>\r\n\t\t\t{this.state.loading ? \r\n\t\t\t\t<div id=\"message\">\r\n\t\t\t\t\tLoading.....\r\n\t\t\t\t</div> : ''}\r\n\t\t\t{!this.state.more ? \r\n\t\t\t<div id=\"message\">\r\n\t\t\t\tThere are no more pictures...\r\n\t\t\t</div> : ''}\r\n\t\t\t</div>\r\n\t\t\t)\t\t\t\r\n\t}\r\n}\r\n\r\n\r\nexport default FetchPhotos;;\r\n","import React, { Component } from 'react';\r\nimport FetchPhotos from './Fetch';\r\n\r\nclass Content extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"content\">\r\n      \t<ul>\r\n      \t<FetchPhotos/>\r\n      \t</ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import React, { Component } from 'react';\nimport Header from './Components/header';\nimport Content from './Components/content';\n\n\nclass App extends Component {\n  componentDidMount (){\n\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Content/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './css/style.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}